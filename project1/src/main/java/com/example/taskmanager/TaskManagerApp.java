package com.example.taskmanager;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class TaskManagerApp {
    private static List<Task> tasks = new ArrayList<>();  // –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å
    private static int nextId = 1;  // –ê–≤—Ç–æ-ID
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("=== –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–¥–∞–Ω—å (–ú—ñ–π TODO List) ===");
        boolean running = true;

        while (running) {  // –ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –¥–æ –≤–∏—Ö–æ–¥—É
            showMenu();  // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
            System.out.print("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ");
            int choice;

            try {
                choice = Integer.parseInt(scanner.nextLine());  // –ß–∏—Ç–∞—î–º–æ —á–∏—Å–ª–æ
            } catch (NumberFormatException e) {
                System.out.println("–ü–æ–º–∏–ª–∫–∞: –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ! (–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å)");
                continue;  // –ù–∞–∑–∞–¥ —É —Ü–∏–∫–ª
            }

            switch (choice) {
                case 1:
                    addTask();
                    break;
                case 2:
                    listAllTasks();
                    break;
                case 3:
                    listUnfinishedTasks();  // –ó Streams!
                    break;
                case 4:
                    markAsDone();
                    break;
                case 5:
                    deleteTask();
                    break;
                case 6:
                    running = false;
                    System.out.println("–í–∏—Ö—ñ–¥. –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!");
                    break;
                default:
                    System.out.println("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ 1‚Äì6.");
            }
        }
        scanner.close();  // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–∫–∞–Ω–µ—Ä
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é
    private static void showMenu() {
        System.out.println("\n=== –ú–ï–ù–Æ ===");
        System.out.println("1. –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è");
        System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è");
        System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ (Streams)");
        System.out.println("4. –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ");
        System.out.println("5. –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è");
        System.out.println("6. –í–∏—Ö—ñ–¥");
    }

    // –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
    private static void addTask() {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å: ");
        String desc = scanner.nextLine();
        if (desc.trim().isEmpty()) {
            System.out.println("–û–ø–∏—Å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!");
            return;
        }
        Task newTask = new Task(nextId++, desc, false);
        tasks.add(newTask);
        System.out.println("‚úÖ –î–æ–¥–∞–Ω–æ: " + newTask);
    }

    // –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (for-each —Ü–∏–∫–ª)
    private static void listAllTasks() {
        if (tasks.isEmpty()) {
            System.out.println("üì≠ –ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å.");
            return;
        }
        System.out.println("\n=== –í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è ===");
        for (Task task : tasks) {
            System.out.println(task);
        }
    }

    // –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ (Streams ‚Äî —Ñ—ñ–ª—å—Ç—Ä!)
    private static void listUnfinishedTasks() {
        if (tasks.isEmpty()) {
            System.out.println("üì≠ –ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å.");
            return;
        }
        System.out.println("\n=== –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (—Ñ—ñ–ª—å—Ç—Ä Streams) ===");
        tasks.stream()  // –ü–æ—á–∏–Ω–∞—î–º–æ –ø–æ—Ç—ñ–∫
                .filter(task -> !task.isDone())  // Lambda: —Ç—ñ–ª—å–∫–∏ !done
                .forEach(System.out::println);  // –í–∏–≤–æ–¥–∏–º–æ –∫–æ–∂–µ–Ω
    }

    // –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–∫–æ–Ω–µ–Ω–∏–º
    private static void markAsDone() {
        if (tasks.isEmpty()) {
            System.out.println("üì≠ –ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å.");
            return;
        }
        System.out.print("ID –∑–∞–≤–¥–∞–Ω–Ω—è: ");
        int id = getIntInput();
        for (Task task : tasks) {
            if (task.getId() == id) {
                task.setDone(true);
                System.out.println("‚úÖ –ü–æ–∑–Ω–∞—á–µ–Ω–æ: " + task);
                return;
            }
        }
        System.out.println("‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –∑ ID " + id + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
    }

    // –í–∏–¥–∞–ª–∏—Ç–∏ (Streams removeIf)
    private static void deleteTask() {
        if (tasks.isEmpty()) {
            System.out.println("üì≠ –ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å.");
            return;
        }
        System.out.print("ID –∑–∞–≤–¥–∞–Ω–Ω—è: ");
        int id = getIntInput();
        boolean removed = tasks.removeIf(task -> task.getId() == id);  // Streams: –≤–∏–¥–∞–ª—è—î–º–æ –∑–∞ —É–º–æ–≤–æ—é
        if (removed) {
            System.out.println("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ!");
        } else {
            System.out.println("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
        }
    }

    // Helper: –ë–µ–∑–ø–µ—á–Ω–∏–π –≤–≤—ñ–¥ int (try-catch)
    private static int getIntInput() {
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            System.out.println("–ü–æ–º–∏–ª–∫–∞: –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ!");
            return -1;  // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ -1
        }
    }
}